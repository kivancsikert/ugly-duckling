name: CI Build
on:
  push:
  release:
    types: [published]

env:
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 256M
  CCACHE_COMPRESS: true
  ESP_IDF_VERSION: v5.4.1

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: mk4-release
            ud_gen: MK4
            ud_debug: 0
            target: esp32s2
          - environment: mk5-release
            ud_gen: MK5
            ud_debug: 0
            target: esp32s3
          - environment: mk6-release
            ud_gen: MK6
            ud_debug: 0
            target: esp32s3
          - environment: mk7-release
            ud_gen: MK7
            ud_debug: 0
            target: esp32s3
          - environment: mk7-debug
            ud_gen: MK7
            ud_debug: 1
            target: esp32s3
          - environment: mk8-release
            ud_gen: MK8
            ud_debug: 0
            target: esp32c6

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: "recursive"

      - name: Restore ccache cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.ESP_IDF_VERSION }}-${{ matrix.environment }}

      - name: esp-idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ env.ESP_IDF_VERSION }}
          esp_idf_docker_image: lptr/esp-idf-clang
          extra_docker_args: -v  ${{ env.CCACHE_DIR }}:/root/.ccache -e CCACHE_DIR=/root/.ccache -e CCACHE_MAXSIZE=${{ env.CCACHE_MAXSIZE }} -e CCACHE_COMPRESS=${{ env.CCACHE_COMPRESS }}
          target: ${{ matrix.target }}
          command: |
            ccache --max-size=${CCACHE_MAXSIZE}
            idf.py build -DUD_GEN=${{ matrix.ud_gen }} -DUD_DEBUG=${{ matrix.ud_debug }}
            ./generate-clang-tidy-compile-db.py
            clang-tidy -p build/clang-tidy main/main.cpp
            ccache -s

      - name: Rename firmware artifact
        run: |
          cp build/ugly-duckling.bin ugly-duckling-${{ matrix.environment }}.bin

      - name: Create debug artifact
        run: |
          zip debug-${{ matrix.environment }}.zip \
            build/project_description.json \
            build/*.bin \
            build/*.elf \
            build/*.map \
            build/config/sdkconfig.h

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ugly-duckling-${{ matrix.environment }}
          path: |
            ugly-duckling-${{ matrix.environment }}.bin
            debug-${{ matrix.environment }}.zip
          if-no-files-found: error

  unit-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Restore ccache cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.ESP_IDF_VERSION }}-unit-test

      - name: esp-idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ env.ESP_IDF_VERSION }}
          extra_docker_args: -v  ${{ env.CCACHE_DIR }}:/root/.ccache -e CCACHE_DIR=/root/.ccache -e CCACHE_MAXSIZE=${{ env.CCACHE_MAXSIZE }} -e CCACHE_COMPRESS=${{ env.CCACHE_COMPRESS }}
          target: esp32s3
          path: test/unit-tests
          command: |
            ccache --max-size=${CCACHE_MAXSIZE}
            idf.py -DUD_GEN=MK6 build
            ccache -s

      - name: Run a Wokwi CI server
        uses: wokwi/wokwi-ci-server-action@v1

      - name: esp-idf test
        run: |
          docker run -v .:/project -w /project/test/unit-tests -e HOME=/tmp -e WOKWI_CLI_TOKEN=${{ secrets.WOKWI_CLI_TOKEN }} lptr/pytest-embedded:latest pytest --embedded-services idf,wokwi ./pytest_unit-tests.py

  integ-test:
    runs-on: ubuntu-latest

    env:
      HOSTNAME: ""

    steps:
      - uses: actions/checkout@v4

      - name: Start Mosquitto
        uses: namoshek/mosquitto-github-action@v1
        with:
          ports: '1883:1883'
          config: ${{ github.workspace }}/.github/mosquitto/mosquitto.conf

      - name: Get Host IP
        run: |
          HOSTNAME=$(hostname -I | awk '{print $1}')
          echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV

      - name: Restore ccache cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.ESP_IDF_VERSION }}-integ-test

      - name: esp-idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ env.ESP_IDF_VERSION }}
          extra_docker_args: -v  ${{ env.CCACHE_DIR }}:/root/.ccache -e CCACHE_DIR=/root/.ccache -e CCACHE_MAXSIZE=${{ env.CCACHE_MAXSIZE }} -e CCACHE_COMPRESS=${{ env.CCACHE_COMPRESS }}
          target: esp32s3
          path: test/integ-tests
          command: |
            ccache --max-size=${CCACHE_MAXSIZE}
            idf.py -DUD_GEN=MK6 -DUD_DEBUG=1 -DFSUPLOAD=1 -DWOKWI=1 -DWOKWI_MQTT_HOST=${{ env.HOSTNAME }} build
            ccache -s

      - name: Run a Wokwi CI server
        uses: wokwi/wokwi-ci-server-action@v1

      - name: Test with Wokwi
        uses: wokwi/wokwi-ci-action@v1
        with:
          token: ${{ secrets.WOKWI_CLI_TOKEN }}
          path: test/integ-tests
          timeout: 30000
          expect_text: 'Device ready'
          serial_log_file: 'log-hello-world.txt'

      # - name: esp-idf test
      #   run: |
      #     docker run -v .:/project -w /project/test/integ-tests -e HOME=/tmp -e WOKWI_CLI_TOKEN=${{ secrets.WOKWI_CLI_TOKEN }} lptr/pytest-embedded:latest pytest --embedded-services idf,wokwi ./pytest_integ-tests.py

  release:
    needs:
      - build
      - unit-test
      - integ-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        uses: AButler/upload-release-assets@v3.0
        with:
          files: ugly-duckling-*/*
          repo-token: ${{ secrets.GITHUB_TOKEN }}
